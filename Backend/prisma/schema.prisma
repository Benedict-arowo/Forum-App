// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  username         String
  password         String
  email            String      @unique()
  profilePicture   String      @default("")
  profilePictureId String      @default("")
  role             Role        @relation(fields: [roleId], references: [id])
  roleId           String
  followers        Follower[]  @relation(name: "user")
  followersRefer   Follower[]  @relation(name: "followerRefer")
  followingRefer   Following[] @relation(name: "followingRefer")
  banner           Banner      @relation(fields: [bannerId], references: [id])
  bannerId         String
  following        Following[]
  bio              String      @default("")
  created          DateTime    @default(now())
  post             Post[]
  comments         Comment[]
  refreshToken     String      @default("")
  reactions        reactions[]
  showMail         Boolean     @default(true)
  instagram        String?
  discord          String?
  mc_username      String?
}

model Banner {
  id   String @id @default(uuid())
  name String
  url  String
  user User[]
}

model Role {
  id      String  @id @default(uuid())
  title   String  @unique
  color   String
  user    User[]
  isStaff Boolean @default(false)

  isAdmin      Boolean @default(false)
  canPostAdmin Boolean @default(false)
  canEditAdmin Boolean @default(false)

  canCreateRole Boolean @default(false)
  canEditRole   Boolean @default(false)
  canDeleteRole Boolean @default(false)

  canManageUsers Boolean @default(false)
  canRemoveUsers Boolean @default(false)
  canEditUsers   Boolean @default(false)

  canCreateCategory Boolean @default(false)
  canEditCategory   Boolean @default(false)
  canDeleteCategory Boolean @default(false)

  canCreatePost Boolean @default(false)
  canEditPost   Boolean @default(false)
  canDeletePost Boolean @default(false)

  canEditOtherPost   Boolean @default(false)
  canDeleteOtherPost Boolean @default(false)

  canCreateComment Boolean @default(false)
  canDeleteComment Boolean @default(false)
  canEditComment   Boolean @default(false)

  canDeleteOtherComment Boolean @default(false)
  canEditOtherComment   Boolean @default(false)
  canManageRules        Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Category {
  id             String        @id @default(uuid())
  name           String        @unique
  posts          Post[]
  mainCategory   MainCategory? @relation(fields: [mainCategoryId], references: [id])
  mainCategoryId String?
  created        DateTime      @default(now())
  updated        DateTime      @updatedAt
  adminOnly      Boolean       @default(false)
}

model Follower {
  refer         String
  referringUser User   @relation(name: "followerRefer", fields: [refer], references: [id], onDelete: Cascade)

  user   User   @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([userId, refer])
}

model Following {
  refer         String
  referringUser User   @relation(name: "followingRefer", fields: [refer], references: [id], onDelete: Cascade)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@id([userId, refer])
}

model Post {
  id         String      @id @default(uuid())
  title      String
  content    String
  comments   Comment[]
  created    DateTime    @default(now())
  updated    DateTime    @updatedAt
  reactions  reactions[]
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  owner      User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
}

model reactions {
  id     String       @id @default(uuid())
  user   User         @relation(fields: [userId], references: [id])
  userId String
  postId String
  post   Post         @relation(fields: [postId], references: [id])
  type   reactionType

  @@unique([userId, postId])
}

enum reactionType {
  Like
  Unlike
}

// model PostLikes {
//   id     String @id @default(uuid())
//   post   Post   @relation(fields: [postId], references: [id])
//   postId String @unique
//   likes  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String
// }

// model PostUnlikes {
//   id     String @id @default(uuid())
//   post   Post   @relation(fields: [postId], references: [id])
//   postId String @unique
//   likes  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String
// }

model Comment {
  id      String   @id @default(uuid())
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  comment String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Game {
  id          String  @id @default(uuid())
  title       String
  description String?
  previewImg  String?
  tags        Json[]
  statsLink   String?
}

model MainCategory {
  id          String     @id @default(uuid())
  title       String     @unique
  priority    Int        @unique
  description String?
  categories  Category[]
}

model Setting {
  id          String  @id @default(uuid())
  serverName  String  @unique
  maintenance Boolean
  infobar     String?
}

model Rule {
  id          String   @id @default(uuid())
  title       String   @unique
  content     String?
  description String?
  created     DateTime @default(now())
  updated     DateTime @updatedAt
}
