// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  username       String
  password       String
  email          String      @unique()
  profilePicture String      @default("")
  role           Role        @relation(fields: [roleId], references: [id])
  roleId         String
  followers      Follower[]
  following      Following[]
  bio            String      @default("")
  created        DateTime    @default(now())
  post           Post[]
  refreshToken   String      @default("")
  reactions       reactions[]
}

model Role {
  id    String @id @default(uuid())
  title String @unique
  color String
  user  User[]

  isAdmin      Boolean @default(false)
  canPostAdmin Boolean @default(false)
  canEditAdmin Boolean @default(false)

  canManageUsers Boolean @default(false)
  canRemoveUsers Boolean @default(false)
  canEditUsers   Boolean @default(false)

  canCreateCategory Boolean @default(false)
  canEditCategory   Boolean @default(false)
  canDeleteCategory Boolean @default(false)

  canCreatePost Boolean @default(false)
  canEditPost   Boolean @default(false)
  canDeletePost Boolean @default(false)

  canEditOtherPost   Boolean @default(false)
  canDeleteOtherPost Boolean @default(false)

  canCreateComment Boolean @default(false)
  canDeleteComment Boolean @default(false)
  canEditComment   Boolean @default(false)

  canDeleteOtherComment Boolean @default(false)
  canEditOtherComment   Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  posts   Post[]
  created DateTime @default(now())
  updated DateTime @updatedAt
  adminOnly Boolean @default(false)
}

model Follower {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Following {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  comments   Comment[]
  created    DateTime  @default(now())
  updated    DateTime  @updatedAt
  reactions      reactions[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
}

model reactions {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  type reactionType

  @@unique([userId, postId])
}

enum reactionType {
  Like
  Unlike
}

// model PostLikes {
//   id     String @id @default(uuid())
//   post   Post   @relation(fields: [postId], references: [id])
//   postId String @unique
//   likes  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String
// }

// model PostUnlikes {
//   id     String @id @default(uuid())
//   post   Post   @relation(fields: [postId], references: [id])
//   postId String @unique
//   likes  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String
// }

model Comment {
  id      String   @id @default(uuid())
  post    Post     @relation(fields: [postId], references: [id])
  postId  String
  comment String
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Game {
  id          String @id @default(uuid())
  title       String
  description String
  previewImg  String
  tags        Json[]
  statsLink   String
}
